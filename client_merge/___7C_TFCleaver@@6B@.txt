//=================================
// Merged Vtable - Errors expected 
//=================================
// `vtable for'C_TFCleaver
// Auto reconstructed from vtable block @ 0x00E703C0
// from "client.dylib", by ida_vtables.idc
0	C_TFCleaver::~C_TFCleaver()
1	C_BaseEntity::SetRefEHandle(CBaseHandle const&)
2	C_BaseEntity::GetRefEHandle(void)const
3	C_BaseEntity::GetCollideable(void)
4	C_BaseEntity::GetClientNetworkable(void)
5	C_BaseEntity::GetClientRenderable(void)
6	C_BaseEntity::GetIClientEntity(void)
7	C_BaseEntity::GetBaseEntity(void)
8	C_BaseEntity::GetClientThinkable(void)
90	C_EconEntity::Release(void)
10	C_BaseEntity::GetAbsOrigin(void)const
11	C_BaseEntity::GetAbsAngles(void)const
12	C_BaseAnimating::GetMouth(void)
13	C_BaseAnimating::GetSoundSpatialization(SpatializationInfo_t &)
14	C_EconEntity::GetDataDescMap(void)
15	C_TFCleaver::YouForgotToImplementOrDeclareClientClass(void)
16	C_TFCleaver::GetClientClass(void)
17	C_TFJar::GetPredDescMap(void)
18	C_BaseEntity::FireBullets(FireBulletsInfo_t const&)
19	C_BaseEntity::ModifyFireBulletsDamage(CTakeDamageInfo *)
20	C_BaseEntity::ShouldDrawUnderwaterBulletBubbles(void)
21	C_BaseEntity::ShouldDrawWaterImpacts(void)
22	C_BaseEntity::HandleShotImpactingWater(FireBulletsInfo_t const&,Vector const&,ITraceFilter *,Vector*)
23	C_BaseEntity::GetBeamTraceFilter(void)
24	C_BaseEntity::DispatchTraceAttack(CTakeDamageInfo const&,Vector const&,CGameTrace *,CDmgAccumulator *)
25	C_BaseEntity::TraceAttack(CTakeDamageInfo const&,Vector const&,CGameTrace *,CDmgAccumulator *)
26	C_BaseEntity::DoImpactEffect(CGameTrace &,int)
27	C_BaseCombatWeapon::MakeTracer(Vector const&,CGameTrace const&,int)
28	C_BaseEntity::GetTracerAttachment(void)
29	C_BaseEntity::BloodColor(void)
30	C_TFWeaponBase::GetTracerType(void)
31	C_TFWeaponBase::Spawn(void)
32	C_BaseEntity::SpawnClientEntity(void)
33	C_TFWeaponBase::Precache(void)
34	C_TFWeaponBase::Activate(void)
35	C_BaseEntity::ParseMapData(CEntityMapData *)
36	C_BaseEntity::KeyValue(char const*,char const*)
37	C_BaseEntity::KeyValue(char const*,float)
38	C_BaseEntity::KeyValue(char const*,Vector const&)
39	C_BaseEntity::GetKeyValue(char const*,char *,int)
40	C_BaseEntity::Init(int,int)
41	C_BaseEntity::GetIClientUnknown(void)
42	C_BaseAnimating::GetBaseAnimating(void)
43	C_BaseEntity::SetClassname(char const*)
44	C_BaseEntity::RecordToolMessage(void)
45	C_BaseAnimating::GetRenderOrigin(void)
46	C_BaseAnimating::GetRenderAngles(void)
47	C_BaseEntity::GetObserverCamOrigin(void)
48	C_BaseEntity::RenderableToWorldTransform(void)
49	C_BaseEntity::IsTransparent(void)
50	C_BaseEntity::IsTwoPass(void)
51	C_BaseAnimating::UsesPowerOfTwoFrameBufferTexture(void)
52	C_BaseEntity::UsesFullFrameBufferTexture(void)
53	C_BaseEntity::IgnoresZBuffer(void)const
54	C_BaseEntity::GetModel(void)const
55	C_BaseCombatWeapon::DrawModel(int)
56	C_BaseEntity::ComputeFxBlend(void)
57	C_BaseEntity::GetFxBlend(void)
58	C_BaseEntity::LODTest(void)
59	C_BaseAnimating::GetRenderBounds(Vector &,Vector &)
60	C_BaseEntity::GetPVSNotifyInterface(void)
61	C_BaseEntity::GetRenderBoundsWorldspace(Vector &,Vector &)
62	C_BaseEntity::GetShadowRenderBounds(Vector &,Vector &,ShadowType_t)
63	C_BaseEntity::GetColorModulation(float *)
64	C_BaseEntity::OnThreadedDrawSetup(void)
65	C_BaseAnimating::TestCollision(Ray_t const&,unsigned int,CGameTrace &)
66	C_BaseAnimating::TestHitboxes(Ray_t const&,unsigned int,CGameTrace &)
67	C_BaseEntity::GetAttackDamageScale(void)
68	C_BaseCombatWeapon::NotifyShouldTransmit(ShouldTransmitState_t)
69	C_BaseAnimating::PreDataUpdate(DataUpdateType_t)
70	C_TFWeaponBase::PostDataUpdate(DataUpdateType_t)
71	C_BaseEntity::OnDataUnchangedInPVS(void)
72	C_BaseAnimating::ValidateModelIndex(void)
73	C_BaseCombatWeapon::SetDormant(bool)
74	C_BaseEntity::IsDormant(void)
75	C_BaseEntity::SetDestroyedOnRecreateEntities(void)
76	C_BaseEntity::GetEFlags(void)const
77	C_BaseEntity::SetEFlags(int)
78	C_BaseEntity::entindex(void)const
79	C_BaseEntity::ReceiveMessage(int,bf_read &)
80	C_BaseEntity::GetDataTableBasePtr(void)
81	C_BaseEntity::ClientThink(void)
82	C_BaseEntity::GetThinkHandle(void)
83	C_BaseEntity::SetThinkHandle(CClientThinkHandlePtr *)
84	C_BaseEntity::ShouldSavePhysics(void)
85	C_BaseEntity::OnSave(void)
86	C_BaseCombatWeapon::OnRestore(void)
87	C_BaseEntity::ObjectCaps(void)
88	C_BaseEntity::Save(ISave &)
89	C_BaseEntity::Restore(IRestore &)
90	C_BaseEntity::CreateVPhysics(void)
91	C_BaseEntity::VPhysicsDestroyObject(void)
92	C_BaseAnimating::VPhysicsUpdate(IPhysicsObject *)
93	C_BaseAnimating::VPhysicsGetObjectList(IPhysicsObject **,int)
94	C_BaseEntity::VPhysicsIsFlesh(void)
95	C_BaseAnimating::SetupBones(matrix3x4_t *,int,int,float)
96	C_EconEntity::SetupWeights(matrix3x4_t const*,int,float *,float *)
97	C_EconEntity::UsesFlexDelayedWeights(void)
98	C_BaseEntity::DoAnimationEvents(void)
990	C_BaseAnimating::AddEntity(void)
100	C_BaseEntity::GetPrevLocalOrigin(void)const
101	C_BaseEntity::GetPrevLocalAngles(void)const
102	C_BaseCombatWeapon::CalcOverrideModelIndex(void)
103	C_BaseEntity::WorldAlignMins(void)const
104	C_BaseEntity::WorldAlignMaxs(void)const
105	C_BaseEntity::WorldSpaceCenter(void)const
106	C_BaseEntity::ComputeWorldSpaceSurroundingBox(Vector *,Vector *)
107	C_BaseEntity::GetHealthBarHeightOffset(void)const
108	C_BaseEntity::GetSolid(void)const
109	C_BaseEntity::GetSolidFlags(void)const
110	C_EconEntity::LookupAttachment(char const*)
111	C_EconEntity::GetAttachment(int,matrix3x4_t &)
112	C_EconEntity::GetAttachment(int,Vector &)
113	C_EconEntity::GetAttachment(int,Vector &,QAngle &)
114	C_EconEntity::GetAttachmentVelocity(int,Vector &,Quaternion &)
115	C_BaseEntity::GetTeam(void)
116	C_BaseEntity::GetTeamNumber(void)const
117	C_BaseEntity::ChangeTeam(int)
118	C_BaseEntity::GetRenderTeamNumber(void)
119	C_BaseEntity::InSameTeam(C_BaseEntity*)
120	C_BaseEntity::InLocalTeam(void)
121	C_BaseEntity::IsValidIDTarget(void)
122	C_BaseEntity::GetIDString(void)
123	C_BaseEntity::ModifyEmitSoundParams(EmitSound_t &)
124	C_EconEntity::InitializeAsClientEntity(char const*,RenderGroup_t)
125	C_BaseAnimating::Simulate(void)
126	C_TFWeaponBase::OnDataChanged(DataUpdateType_t)
127	C_TFWeaponBase::OnPreDataChanged(DataUpdateType_t)
128	C_BaseEntity::GetClientVehicle(void)
129	C_BaseAnimating::GetAimEntOrigin(IClientEntity *,Vector *,QAngle *)
130	C_BaseEntity::GetOldOrigin(void)
131	C_BaseEntity::GetRenderGroup(void)
132	C_BaseCombatWeapon::GetToolRecordingState(KeyValues *)
133	C_BaseAnimating::CleanupToolRecordingState(KeyValues *)
134	C_BaseAnimating::GetCollideType(void)
135	C_TFWeaponBase::ShouldDraw(void)
136	C_TFWeaponBase::UpdateVisibility(void)
137	C_BaseAnimating::IsSelfAnimating(void)
138	C_BaseEntity::OnLatchInterpolatedVariables(int)
139	C_EconEntity::OnNewModel(void)
140	C_BaseEntity::OnNewParticleEffect(char const*,CNewParticleEffect *)
141	C_BaseAnimating::ResetLatched(void)
142	C_BaseAnimating::Interpolate(float)
143	C_BaseEntity::IsSubModel(void)
144	C_BaseEntity::CreateLightEffects(void)
145	C_BaseAnimating::Clear(void)
146	C_BaseEntity::DrawBrushModel(bool,int,bool)
147	C_BaseEntity::GetTextureAnimationStartTime(void)
148	C_BaseEntity::TextureAnimationWrapped(void)
149	C_BaseEntity::SetNextClientThink(float)
150	C_BaseEntity::SetHealth(int)
151	C_BaseEntity::GetHealth(void)const
152	C_BaseEntity::GetMaxHealth(void)const
153	C_BaseEntity::IsVisibleToTargetID(void)const
154	C_BaseEntity::IsHealthBarVisible(void)const
155	C_TFWeaponBase::ShadowCastType(void)
156	C_BaseEntity::ShouldReceiveProjectedTextures(int)
157	C_BaseEntity::IsShadowDirty(void)
158	C_BaseEntity::MarkShadowDirty(bool)
159	C_BaseEntity::GetShadowParent(void)
160	C_BaseEntity::FirstShadowChild(void)
161	C_BaseEntity::NextShadowPeer(void)
162	C_BaseEntity::AddDecal(Vector const&,Vector const&,Vector const&,int,int,bool,CGameTrace &,int)
163	C_BaseEntity::AddColoredDecal(Vector const&,Vector const&,Vector const&,int,int,bool,CGameTrace &,Color,int)
164	C_BaseEntity::IsClientCreated(void)const
165	C_TFWeaponBase::UpdateOnRemove(void)
166	C_BaseEntity::SUB_Remove(void)
167	C_BaseAnimating::SetPredictable(bool)
168	C_BaseAnimating::RestoreData(char const*,int,int)
169	C_BaseEntity::DamageDecal(int,int)
170	C_BaseEntity::DecalTrace(CGameTrace *,char const*)
171	C_BaseEntity::ImpactTrace(CGameTrace *,int,char const*)
172	C_TFWeaponBase::ShouldPredict(void)
173	C_BaseEntity::Think(void)
174	C_BaseEntity::CanBePoweredUp(void)
175	C_BaseEntity::AttemptToPowerup(int,float,float,C_BaseEntity*,CDamageModifier *)
176	C_BaseEntity::IsCurrentlyTouching(void)const
177	C_BaseEntity::StartTouch(C_BaseEntity*)
178	C_BaseEntity::Touch(C_BaseEntity*)
179	C_BaseEntity::EndTouch(C_BaseEntity*)
180	C_BaseEntity::PhysicsSolidMaskForEntity(void)const
181	C_BaseEntity::PhysicsSimulate(void)
182	C_BaseEntity::IsAlive(void)
183	C_BaseEntity::IsPlayer(void)const
184	C_BaseEntity::IsBaseCombatCharacter(void)
185	C_BaseEntity::MyCombatCharacterPointer(void)
186	C_BaseEntity::IsNPC(void)
187	C_BaseEntity::IsNextBot(void)
188	C_BaseEntity::IsBaseObject(void)const
189	C_BaseCombatWeapon::IsBaseCombatWeapon(void)const
190	C_BaseCombatWeapon::MyCombatWeaponPointer(void)
191	C_BaseEntity::IsCombatItem(void)const
192	C_BaseEntity::IsBaseTrain(void)const
193	C_BaseEntity::EyePosition(void)
194	C_BaseEntity::EyeAngles(void)
195	C_BaseEntity::LocalEyeAngles(void)
196	C_BaseEntity::EarPosition(void)
197	C_BaseEntity::ShouldCollide(int,int)const
198	C_BaseEntity::GetViewOffset(void)const
199	C_BaseEntity::SetViewOffset(Vector const&)
200	C_BaseAnimating::GetBody(void)
201	C_TFWeaponBase::GetSkin(void)
202	C_BaseEntity::GetModelInstance(void)
203	C_BaseEntity::GetShadowHandle(void)const
204	C_BaseEntity::RenderHandle(void)
205	C_BaseEntity::CreateModelInstance(void)
206	C_BaseEntity::ShouldInterpolate(void)
207	C_BaseAnimating::GetClientSideFade(void)
208	C_BaseCombatWeapon::BoneMergeFastCullBloat(Vector &,Vector &,Vector const&,Vector const&)const
209	C_BaseEntity::OnPredictedEntityRemove(bool,C_BaseEntity*)
210	C_BaseEntity::GetShadowCastDistance(float *,ShadowType_t)const
211	C_BaseEntity::GetShadowCastDirection(Vector *,ShadowType_t)const
212	C_BaseEntity::GetShadowUseOtherEntity(void)const
213	C_BaseEntity::SetShadowUseOtherEntity(C_BaseEntity*)
214	C_BaseEntity::AddRagdollToFadeQueue(void)
215	C_BaseEntity::IsDeflectable(void)
216	C_BaseAnimating::GetStudioBody(void)
217	C_BaseEntity::PerformCustomPhysics(Vector *,Vector *,QAngle *,QAngle *)
218	C_BaseEntity::GetRenderClipPlane(void)
219	C_EconEntity::ValidateEntityAttachedToPlayer(bool &)
220	C_BaseAnimating::GetBoneControllers(float *)
221	C_BaseAnimating::SetBoneController(int,float)
222	C_BaseAnimating::GetPoseParameters(CStudioHdr *,float *)
223	C_BaseAnimating::BuildTransformations(CStudioHdr *,Vector *,Quaternion *,matrix3x4_t const&,int,CBoneBitList &)
224	C_BaseAnimating::ApplyBoneMatrixTransform(matrix3x4_t &)
225	C_BaseAnimating::UpdateIKLocks(float)
226	C_BaseAnimating::CalculateIKLocks(float)
227	C_TFWeaponBase::InternalDrawModel(int)
228	C_EconEntity::OnInternalDrawModel(ClientModelRenderInfo_t *)
229	C_BaseAnimating::OnPostInternalDrawModel(ClientModelRenderInfo_t *)
230	C_EconEntity::GetEconWeaponMaterialOverride(int)
231	C_BaseAnimating::ControlMouth(CStudioHdr *)
232	C_BaseAnimating::DoAnimationEvents(CStudioHdr *)
233	C_EconEntity::FireEvent(Vector const&,QAngle const&,int,char const*)
234	C_BaseAnimating::FireObsoleteEvent(Vector const&,QAngle const&,int,char const*)
235	C_TFCleaver::ModifyEventParticles(char const*)
236	C_BaseAnimating::DispatchMuzzleEffect(char const*,bool)
237	C_BaseAnimating::StandardBlendingRules(CStudioHdr *,Vector *,Quaternion *,float,int)
238	C_BaseAnimating::AccumulateLayers(IBoneSetup &,Vector *,Quaternion *,float)
239	C_BaseAnimating::ChildLayerBlend(Vector *,Quaternion *,float,int)
240	C_BaseAnimating::AttachEntityToBone(C_BaseAnimating*,int,Vector,QAngle)
241	C_BaseAnimating::NotifyBoneAttached(C_BaseAnimating*)
242	C_BaseAnimating::UpdateBoneAttachments(void)
243	C_BaseAnimating::BecomeRagdollOnClient(void)
244	C_BaseAnimating::SaveRagdollInfo(int,matrix3x4_t const&,CBoneAccessor &)
245	C_BaseAnimating::RetrieveRagdollInfo(Vector *,Quaternion *)
246	C_BaseAnimating::GetRagdollInitBoneArrays(matrix3x4_t *,matrix3x4_t *,matrix3x4_t *,float)
247	C_BaseAnimating::RefreshCollisionBounds(void)
248	C_BaseAnimating::SetSequence(int)
249	C_BaseAnimating::StudioFrameAdvance(void)
250	C_BaseAnimating::FrameAdvance(float)
251	C_BaseAnimating::GetSequenceCycleRate(CStudioHdr *,int)
252	C_BaseAnimating::UpdateClientSideAnimation(void)
253	C_BaseAnimating::ComputeClientSideAnimationFlags(void)
254	C_BaseAnimating::ResetClientsideFrame(void)
255	C_BaseAnimating::IsActivityFinished(void)
256	C_BaseAnimating::UncorrectViewModelAttachment(Vector &)
257	C_BaseAnimating::DoMuzzleFlash(void)
258	C_TFWeaponBase::ProcessMuzzleFlashEvent(void)
259	C_BaseAnimating::SetServerIntendedCycle(float)
260	C_BaseAnimating::GetServerIntendedCycle(void)
261	C_BaseAnimating::ShouldResetSequenceOnNewModel(void)
262	C_BaseAnimating::IsViewModel(void)const
263	C_BaseAnimating::FormatViewModelAttachment(int,matrix3x4_t &)
264	C_BaseAnimating::IsMenuModel(void)const
265	C_BaseAnimating::CalcAttachments(void)
266	C_BaseAnimating::LastBoneChangedTime(void)
267	C_BaseAnimating::OnModelLoadComplete(model_t const*)
268	C_EconEntity::ShouldShowToolTip(void)
269	C_TFWeaponBase::OnFireEvent(C_BaseViewModel *,Vector const&,QAngle const&,int,char const*)
270	C_EconEntity::ShouldDrawParticleSystems(void)
271	C_EconEntity::UpdateAttachmentModels(void)
272	C_TFWeaponBase::AttachmentModelsShouldBeVisible(void)
273	C_EconEntity::ViewModel_IsTransparent(void)
274	C_EconEntity::ViewModel_IsUsingFBTexture(void)
275	C_EconEntity::IsOverridingViewmodel(void)
276	C_EconEntity::DrawOverriddenViewmodel(C_BaseViewModel *,int)
277	C_EconEntity::GetAttachment(char const*,Vector &)
278	C_EconEntity::GetAttachment(char const*,Vector &,QAngle &)
279	C_EconEntity::ViewModelAttachmentBlending(CStudioHdr *,Vector *,Quaternion *,float,int)
280	C_EconEntity::SetMaterialOverride(int,char const*)
281	C_EconEntity::SetMaterialOverride(int,CMaterialReference &)
282	C_EconEntity::GetAttributeManager(void)
283	C_EconEntity::GetAttributeContainer(void)
284	C_EconEntity::GetAttributeOwner(void)
285	C_EconEntity::GetAttributeList(void)
286	C_TFWeaponBase::ReapplyProvision(void)
287	C_EconEntity::UpdateBodygroups(C_BaseCombatCharacter *,int)
288	C_TFWeaponBase::TranslateViewmodelHandActivityInternal(Activity)
289	C_TFWeaponBase::IsPredicted(void)const
290	C_BaseCombatWeapon::GetSubType(void)
291	C_BaseCombatWeapon::SetSubType(int)
292	C_TFWeaponBase::Equip(C_BaseCombatCharacter *)
293	C_TFWeaponBase::Drop(Vector const&)
294	C_BaseCombatWeapon::UpdateClientData(C_BasePlayer *)
295	C_BaseCombatWeapon::IsAllowedToSwitch(void)
296	C_TFWeaponBaseGun::CanBeSelected(void)
297	C_TFWeaponBase::VisibleInWeaponSelection(void)
298	C_TFWeaponBase::HasAmmo(void)
299	C_BaseCombatWeapon::SetPickupTouch(void)
300	C_BaseCombatWeapon::DefaultTouch(C_BaseEntity *)
301	C_BaseCombatWeapon::GiveTo(C_BaseEntity *)
302	C_BaseCombatWeapon::ShouldDisplayAltFireHUDHint(void)
303	C_BaseCombatWeapon::DisplayAltFireHudHint(void)
304	C_BaseCombatWeapon::RescindAltFireHudHint(void)
305	C_BaseCombatWeapon::ShouldDisplayReloadHUDHint(void)
306	C_BaseCombatWeapon::DisplayReloadHudHint(void)
307	C_BaseCombatWeapon::RescindReloadHudHint(void)
308	C_BaseCombatWeapon::SetViewModelIndex(int)
309	C_TFWeaponBase::SendWeaponAnim(int)
310	C_BaseCombatWeapon::SendViewModelAnim(int)
311	C_BaseCombatWeapon::SetViewModel(void)
312	C_BaseCombatWeapon::HasWeaponIdleTimeElapsed(void)
313	C_BaseCombatWeapon::SetWeaponIdleTime(float)
314	C_BaseCombatWeapon::GetWeaponIdleTime(void)
315	C_BaseCombatWeapon::HasAnyAmmo(void)
316	C_TFWeaponBaseGun::HasPrimaryAmmo(void)
317	C_BaseCombatWeapon::HasSecondaryAmmo(void)
318	C_TFWeaponBase::CanHolster(void)const
319	C_BaseCombatWeapon::DefaultDeploy(char *,char *,int,char *)
320	C_TFWeaponBaseGun::CanDeploy(void)
321	C_TFWeaponBase::Deploy(void)
322	C_TFCleaver::Holster(C_BaseCombatWeapon *)
323	C_BaseCombatWeapon::GetLastWeapon(void)
324	C_TFWeaponBase::SetWeaponVisible(bool)
325	C_BaseCombatWeapon::IsWeaponVisible(void)
326	C_BaseCombatWeapon::ReloadOrSwitchWeapons(void)
327	C_TFWeaponBase::OnActiveStateChanged(int)
328	C_BaseCombatWeapon::HolsterOnDetach(void)
329	C_BaseCombatWeapon::IsHolstered(void)
330	C_TFWeaponBase::Detach(void)
331	C_BaseCombatWeapon::ItemPreFrame(void)
332	C_TFWeaponBase::ItemPostFrame(void)
333	C_TFWeaponBase::ItemBusyFrame(void)
334	C_TFWeaponBase::ItemHolsterFrame(void)
335	C_TFWeaponBase::WeaponIdle(void)
336	C_BaseCombatWeapon::HandleFireOnEmpty(void)
337	C_TFWeaponBase::CanPerformSecondaryAttack(void)const
338	C_BaseCombatWeapon::ShouldBlockPrimaryFire(void)
339	C_BaseCombatWeapon::CreateMove(float,CUserCmd *,QAngle const&)
340	C_BaseCombatWeapon::IsWeaponZoomed(void)
341	C_TFWeaponBase::CheckReload(void)
342	C_TFWeaponBase::FinishReload(void)
343	C_TFWeaponBase::AbortReload(void)
344	C_TFWeaponBase::Reload(void)
345	C_TFWeaponBase::AutoFiresFullClip(void)const
346	C_BaseCombatWeapon::UpdateAutoFire(void)
347	C_TFJar::PrimaryAttack(void)
348	C_TFCleaver::SecondaryAttack(void)
349	C_BaseCombatWeapon::GetPrimaryAttackActivity(void)
350	C_BaseCombatWeapon::GetSecondaryAttackActivity(void)
351	C_BaseCombatWeapon::GetDrawActivity(void)
352	C_BaseCombatWeapon::GetDefaultAnimSpeed(void)
353	C_BaseCombatWeapon::GetBulletType(void)
354	C_BaseCombatWeapon::GetBulletSpread(void)
355	C_BaseCombatWeapon::GetBulletSpread(WeaponProficiency_t)
356	C_BaseCombatWeapon::GetSpreadBias(WeaponProficiency_t)
357	C_BaseCombatWeapon::GetFireRate(void)
358	C_BaseCombatWeapon::GetMinBurst(void)
359	C_BaseCombatWeapon::GetMaxBurst(void)
360	C_BaseCombatWeapon::GetMinRestTime(void)
361	C_BaseCombatWeapon::GetMaxRestTime(void)
362	C_BaseCombatWeapon::GetRandomBurst(void)
363	C_BaseCombatWeapon::WeaponSound(WeaponSound_t,float)
364	C_BaseCombatWeapon::StopWeaponSound(WeaponSound_t)
365	C_BaseCombatWeapon::GetProficiencyValues(void)
366	C_BaseCombatWeapon::GetMaxAutoAimDeflection(void)
367	C_BaseCombatWeapon::WeaponAutoAimScale(void)
368	C_BaseCombatWeapon::StartSprinting(void)
369	C_BaseCombatWeapon::StopSprinting(void)
370	C_BaseCombatWeapon::GetDamage(float,int)
371	C_BaseCombatWeapon::SetActivity(Activity,float)
372	C_BaseCombatWeapon::AddViewKick(void)
373	C_BaseCombatWeapon::GetDeathNoticeName(void)
374	C_BaseCombatWeapon::OnPickedUp(C_BaseCombatCharacter *)
375	C_TFWeaponBase::AddViewmodelBob(C_BaseViewModel *,Vector &,QAngle &)
376	C_TFWeaponBase::CalcViewmodelBob(void)
377	C_BaseCombatWeapon::GetControlPanelInfo(int,char const*&)
378	C_BaseCombatWeapon::GetControlPanelClassName(int,char const*&)
379	C_BaseCombatWeapon::ShouldShowControlPanels(void)
380	C_BaseCombatWeapon::CanBePickedUpByNPCs(void)
381	C_BaseCombatWeapon::GetSkinOverride(void)const
382	C_TFWeaponBase::GetViewModel(int)const
383	C_TFWeaponBase::GetWorldModel(void)const
384	C_BaseCombatWeapon::GetAnimPrefix(void)const
385	C_TFWeaponBase::GetMaxClip1(void)const
386	C_BaseCombatWeapon::GetMaxClip2(void)const
387	C_TFWeaponBase::GetDefaultClip1(void)const
388	C_BaseCombatWeapon::GetDefaultClip2(void)const
389	C_BaseCombatWeapon::GetWeight(void)const
390	C_BaseCombatWeapon::AllowsAutoSwitchTo(void)const
391	C_BaseCombatWeapon::AllowsAutoSwitchFrom(void)const
392	C_TFWeaponBase::ForceWeaponSwitch(void)const
393	C_BaseCombatWeapon::GetWeaponFlags(void)const
394	C_BaseCombatWeapon::GetSlot(void)const
395	C_BaseCombatWeapon::GetPosition(void)const
396	C_BaseCombatWeapon::GetName(void)const
397	C_BaseCombatWeapon::GetPrintName(void)const
398	C_TFWeaponBase::GetShootSound(int)const
399	C_BaseCombatWeapon::GetRumbleEffect(void)const
400	C_BaseCombatWeapon::UsesClipsForAmmo1(void)const
401	C_BaseCombatWeapon::UsesClipsForAmmo2(void)const
402	C_BaseCombatWeapon::GetEncryptionKey(void)
403	C_BaseCombatWeapon::GetPrimaryAmmoType(void)const
404	C_BaseCombatWeapon::GetSecondaryAmmoType(void)const
405	C_TFWeaponBase::Clip1(void)
406	C_TFWeaponBase::Clip2(void)
407	C_BaseCombatWeapon::GetSpriteActive(void)const
408	C_BaseCombatWeapon::GetSpriteInactive(void)const
409	C_BaseCombatWeapon::GetSpriteAmmo(void)const
410	C_BaseCombatWeapon::GetSpriteAmmo2(void)const
411	C_BaseCombatWeapon::GetSpriteCrosshair(void)const
412	C_BaseCombatWeapon::GetSpriteAutoaim(void)const
413	C_BaseCombatWeapon::GetSpriteZoomedCrosshair(void)const
414	C_BaseCombatWeapon::GetSpriteZoomedAutoaim(void)const
415	C_BaseCombatWeapon::ActivityOverride(Activity,bool *)
416	C_TFWeaponBase::ActivityList(int &)
417	C_BaseCombatWeapon::PoseParameterOverride(bool)
418	C_BaseCombatWeapon::PoseParamList(int &)
419	C_BaseCombatWeapon::ShouldUseLargeViewModelVROverride(void)
420	C_BaseCombatWeapon::RestartParticleEffect(void)
421	C_TFWeaponBase::Redraw(void)
422	C_BaseCombatWeapon::ViewModelDrawn(C_BaseViewModel *)
423	C_BaseCombatWeapon::DrawCrosshair(void)
424	C_TFWeaponBase::ShouldDrawCrosshair(void)
425	C_BaseCombatWeapon::IsCarriedByLocalPlayer(void)
426	C_BaseCombatWeapon::ShouldDrawUsingViewModel(void)
427	C_BaseCombatWeapon::IsActiveByLocalPlayer(void)
428	C_BaseCombatWeapon::ShouldDrawPickup(void)
429	C_BaseCombatWeapon::HandleInput(void)
430	C_BaseCombatWeapon::OverrideMouseInput(float *,float *)
431	C_BaseCombatWeapon::KeyInput(int,ButtonCode_t,char const*)
432	C_BaseCombatWeapon::AddLookShift(void)
433	C_BaseCombatWeapon::GetViewmodelBoneControllers(C_BaseViewModel *,float *)
434	C_TFWeaponBase::GetWorldModelIndex(void)
435	C_BaseCombatWeapon::GetWeaponCrosshairScale(float &)
436	C_BaseCombatWeapon::CanLower(void)
437	C_TFWeaponBase::Ready(void)
438	C_TFWeaponBase::Lower(void)
439	C_BaseCombatWeapon::HideThink(void)
440	C_BaseCombatWeapon::CanReload(void)
441	C_BaseCombatWeapon::NetworkStateChanged_m_nNextThinkTick(void)
442	C_BaseCombatWeapon::NetworkStateChanged_m_nNextThinkTick(void *)
443	C_TFWeaponBase::FallInit(void)
444	C_TFCleaver::GetWeaponID(void)const
445	C_TFWeaponBase::GetDamageType(void)const
446	C_TFWeaponBase::GetCustomDamageType(void)const
447	C_TFWeaponBase::UsesPrimaryAmmo(void)
448	C_TFWeaponBase::UberChargeAmmoPerShot(void)
449	C_TFWeaponBase::GetOwnerViaInterface(void)
450	C_TFWeaponBase::OwnerCanJump(void)
451	C_TFWeaponBase::UpdateHands(void)
452	C_TFWeaponBase::OwnerCanTaunt(void)
453	C_TFWeaponBase::CanBeCritBoosted(void)
454	C_TFWeaponBase::UpdateExtraWearablesVisibility(void)
455	C_TFWeaponBase::RemoveExtraWearables(void)
456	C_TFWeaponBase::Misfire(void)
457	C_TFWeaponBase::FireFullClipAtOnce(void)
458	C_TFWeaponBase::CalcIsAttackCriticalHelper(void)
459	C_TFWeaponBase::CalcIsAttackCriticalHelperNoCrits(void)
460	C_TFWeaponBase::GetPenetrateType(void)const
461	C_TFWeaponBase::GetProjectileFireSetup(C_TFPlayer *,Vector,Vector*,QAngle *,bool,float)
462	C_TFWeaponBase::GetSpreadAngles(void)
463	C_TFWeaponBase::IsFiring(void)const
464	C_TFWeaponBase::AreRandomCritsEnabled(void)
465	C_TFWeaponBase::DefaultReload(int,int,int)
466	C_TFWeaponBase::IsReloading(void)const
467	C_TFWeaponBase::CheckReloadMisfire(void)
468	C_TFWeaponBase::CanDrop(void)
469	C_TFWeaponBase::AllowTaunts(void)

